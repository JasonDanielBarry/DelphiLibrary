unit VectorClass;

interface

    uses
        system.sysutils, system.Math,
        GeometryTypes,
        GeometryBaseClass;

    type TGeomSpaceVector = class(TGeom)
        private
            const
                boundaryErrorMessage : string = 'Space Vector index out of bounds';
            var
                components : TArray<double>;
            //set component
                procedure setComponent( dimensionIndexIn        : integer;
                                        const componentValueIn  : double);
            //get component
                function getComponent(dimensionIndexIn : integer) : double;
            //deep copy
                function copySelf() : TGeomSpaceVector;
        public
            //constructor
                constructor create();
            //destructor
                destructor destroy(); override;
            //set dimensions
                procedure setDimensions(dimensionCountIn : integer);
            //get dimensions
                function dimensions() : integer;
            //add component
                procedure addComponent(componentValueIn : double);
            //calculate vector length
                function calculateLength() : double;
            //unit vector
                //convert self into a unit vector
                    procedure unitVector();
                //return a unit vector
                    function calculateUnitVector() : TGeomSpaceVector;
            //component property
                property component[dimensionIndexIn : integer] : double read getComponent write setComponent; default;
    end;

implementation

    //private
        //set component
            procedure TGeomSpaceVector.setComponent(dimensionIndexIn        : integer;
                                                    const componentValueIn  : double);
                begin
                    try
                        components[dimensionIndexIn] := componentValueIn;
                    except
                        raise Exception.Create(boundaryErrorMessage);
                    end;
                end;

        //get component
            function TGeomSpaceVector.getComponent(dimensionIndexIn : integer) : double;
                begin
                    try
                        result := components[dimensionIndexIn];
                    except
                        raise Exception.Create(boundaryErrorMessage);
                    end;
                end;

        //deep copy
            function TGeomSpaceVector.copySelf() : TGeomSpaceVector;
                var
                    i           : integer;
                    newVector   : TGeomSpaceVector;
                begin
                    newVector := TGeomSpaceVector.create();

                    for i := 0 to (dimensions() - 1) do
                        begin
                            newVector.addComponent(self[i]);
                        end;

                    result := newVector;
                end;


    //public
        //constructor
            constructor TGeomSpaceVector.create();
                begin
                    inherited create();

                    setDimensions(0);
                end;

        //destructor
            destructor TGeomSpaceVector.destroy();
                begin
                    inherited Destroy();
                end;

        //set dimensions
            procedure TGeomSpaceVector.setDimensions(dimensionCountIn : integer);
                begin
                    SetLength(components, dimensionCountIn);
                end;

        //get dimensions
            function TGeomSpaceVector.dimensions() : integer;
                begin
                    result := length(components);
                end;

        //add component
            procedure TGeomSpaceVector.addComponent(componentValueIn : double);
                var
                    arrLen : integer;
                begin
                    setDimensions(dimensions + 1);

                    self[dimensions() - 1] := componentValueIn;
                end;

        //calculate vector length
            function TGeomSpaceVector.calculateLength() : double;
                var
                    i                           : integer;
                    vectorLength, squaredSum    : double;
                begin
                    squaredSum := 0;

                    if (dimensions > 0) then
                        for i := 0 to (dimensions() - 1) do
                            squaredSum := squaredSum + power(self[i], 2);

                    lengthvectorLengthvectorLength := Sqrt(squaredSum);
                end;

        //unit vector
            //convert self into a unit vector
                procedure TGeomSpaceVector.unitVector();
                    var
                        i : integer;
                    begin
                        for i := 0 to (dimensions() - 1) do
                            self[i] := self[i] / self.calculateLength();

                    end;

            //return a unit vector
                function TGeomSpaceVector.calculateUnitVector() : TGeomSpaceVector;
                    begin

                    end;



end.
